// code in gfg about the buy and sell
import java.util.ArrayList;

class Solution {
    // Function to find the days of buying and selling stock for max profit.
    ArrayList<ArrayList<Integer>> stockBuySell(int A[], int n) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();

        if (n <= 1) {
            return result; // No profit possible with 0 or 1 day
        }

        int buyIndex = -1;
        int sellIndex = -1;
        int maxProfit = 0;

        for (int i = 0; i < n - 1; i++) {
            if (A[i] < A[i + 1]) {
                // Found a potential buying opportunity
                if (buyIndex == -1) {
                    buyIndex = i;
                }
            } else if (A[i] > A[i + 1]) {
                // Found a potential selling opportunity
                if (buyIndex != -1) {
                    sellIndex = i;
                    int profit = A[sellIndex] - A[buyIndex];
                    if (profit > 0) {
                        ArrayList<Integer> segment = new ArrayList<>();
                        segment.add(buyIndex);
                        segment.add(sellIndex);
                        result.add(segment);
                        maxProfit += profit;
                    }
                    buyIndex = -1; // Reset buyIndex after selling
                }
            }
        }

        // Handle the case where the last day is a potential selling opportunity
        if (buyIndex != -1 && A[n - 1] > A[buyIndex]) {
            sellIndex = n - 1;
            int profit = A[sellIndex] - A[buyIndex];
            if (profit > 0) {
                ArrayList<Integer> segment = new ArrayList<>();
                segment.add(buyIndex);
                segment.add(sellIndex);
                result.add(segment);
                maxProfit += profit;
            }
        }

        if (maxProfit == 0) {
            result.clear(); // No profit, so clear the result list
        }

        return result;
    }
}
// duplicat arrays
class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) {
            return 0; // Empty array, no duplicates
        }

        int slowPointer = 1; // Start from the second element
        for (int fastPointer = 1; fastPointer < nums.length; fastPointer++) {
            // If the current element is different from the previous element,
            // move it to the slowPointer position and increment slowPointer
            if (nums[fastPointer] != nums[fastPointer - 1]) {
                nums[slowPointer] = nums[fastPointer];
                slowPointer++;
            }
        }

        return slowPointer; // Return the number of unique elements
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        int[] nums1 = {1, 1, 2};
        int k1 = solution.removeDuplicates(nums1);
        System.out.println("Output for nums1: " + k1);
        // Print nums1 to verify
        for (int i = 0; i < k1; i++) {
            System.out.print(nums1[i] + " ");
        }
        System.out.println();

        int[] nums2 = {0, 0, 1, 1, 1, 2, 2, 3, 3, 4};
        int k2 = solution.removeDuplicates(nums2);
        System.out.println("Output for nums2: " + k2);
        // Print nums2 to verify
        for (int i = 0; i < k2; i++) {
            System.out.print(nums2[i] + " ");
        }
        System.out.println();
    }
}
