// inversion problem in gfg
class Solution {
    // Function to count inversions in the array.
    static long inversionCount(long arr[], long N) {
        // Create a temporary array to store sorted elements during merge
        long[] temp = new long[(int) N];
        
        // Initialize the inversion count
        long count = mergeSort(arr, temp, 0, (int) (N - 1));
        
        // Return the inversion count
        return count;
    }

    // Merge sort function to count inversions
    static long mergeSort(long arr[], long temp[], int left, int right) {
        long count = 0;
        if (left < right) {
            int mid = (left + right) / 2;

            // Recursive calls for left and right subarrays
            count += mergeSort(arr, temp, left, mid);
            count += mergeSort(arr, temp, mid + 1, right);

            // Merge the sorted halves and count inversions
            count += merge(arr, temp, left, mid + 1, right);
        }
        return count;
    }

    // Merge function to merge two sorted halves and count inversions
    static long merge(long arr[], long temp[], int left, int mid, int right) {
        int i = left; // Index for left subarray
        int j = mid; // Index for right subarray
        int k = left; // Index for temporary array
        long count = 0;

        // Merge and count inversions
        while (i <= mid - 1 && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                count += (mid - i); // Increment inversion count
            }
        }

        // Copy remaining elements from left subarray if any
        while (i <= mid - 1) {
            temp[k++] = arr[i++];
        }

        // Copy remaining elements from right subarray if any
        while (j <= right) {
            temp[k++] = arr[j++];
        }

        // Copy elements from temp back to arr
        for (i = left; i <= right; i++) {
            arr[i] = temp[i];
        }

        return count;
    }
}
// add digits :
class Solution {
    public int addDigits(int num) {
        if(num == 0) {
            return 0;
        }
        else if(num % 9 == 0) {
            return 9;
        }
        else {
            return num % 9;
        }
    }
}
