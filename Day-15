// inversion problem in gfg
class Solution {
    // Function to count inversions in the array.
    static long inversionCount(long arr[], long N) {
        // Create a temporary array to store sorted elements during merge
        long[] temp = new long[(int) N];
        
        // Initialize the inversion count
        long count = mergeSort(arr, temp, 0, (int) (N - 1));
        
        // Return the inversion count
        return count;
    }

    // Merge sort function to count inversions
    static long mergeSort(long arr[], long temp[], int left, int right) {
        long count = 0;
        if (left < right) {
            int mid = (left + right) / 2;

            // Recursive calls for left and right subarrays
            count += mergeSort(arr, temp, left, mid);
            count += mergeSort(arr, temp, mid + 1, right);

            // Merge the sorted halves and count inversions
            count += merge(arr, temp, left, mid + 1, right);
        }
        return count;
    }

    // Merge function to merge two sorted halves and count inversions
    static long merge(long arr[], long temp[], int left, int mid, int right) {
        int i = left; // Index for left subarray
        int j = mid; // Index for right subarray
        int k = left; // Index for temporary array
        long count = 0;

        // Merge and count inversions
        while (i <= mid - 1 && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
                count += (mid - i); // Increment inversion count
            }
        }

        // Copy remaining elements from left subarray if any
        while (i <= mid - 1) {
            temp[k++] = arr[i++];
        }

        // Copy remaining elements from right subarray if any
        while (j <= right) {
            temp[k++] = arr[j++];
        }

        // Copy elements from temp back to arr
        for (i = left; i <= right; i++) {
            arr[i] = temp[i];
        }

        return count;
    }
}
// add digits :
class Solution {
    public int addDigits(int num) {
        if(num == 0) {
            return 0;
        }
        else if(num % 9 == 0) {
            return 9;
        }
        else {
            return num % 9;
        }
    }
}
it has som of the concepts behinds:


EXPLANATION
Divisibility by 9 Rule:
Any number whose digits add up to 9 is divisible by 9.
Examples include 18, 27, 36, 45, 54, 63, 72, 81, 90, etc.
Digital Root for Divisible by 9 Numbers:
The digital root (sum of digits until a single digit is obtained) for any number divisible by 9 is always 9.
Example: For 99, 9 + 9 = 18, and 1 + 8 = 9, confirming the digital root is always 9.
Digital Root for 0:
The digital root of 0 is always 0.
Digital Root for Other Numbers:
For numbers that aren't 0 and aren't divisible by 9, the digital root is obtained by taking the number modulo 9.
Formula: Digital Root = n mod 9
Examples of Modulo 9 Calculation:
100 mod 9 = 1 (one greater than 99, which is divisible by 9).
101 mod 9 = 2
102 mod 9 = 3 and so on
Optimizing the Digital Root Calculation:
This method avoids the traditional approach of repeatedly adding digits until only one digit remains.
It provides a more efficient way to find the digital root, especially for larger numbers.
LeetCode Perspective:
Acknowledges that understanding and applying such mathematical tricks is a valuable skill in solving problems on platforms like LeetCode.
Emphasizes that the given explanation may seem unrelated to the traditional method but showcases the importance of different problem-solving approaches and mathematical insights.
Remember, these points collectively highlight the mathematical principles behind the digital root calculation, providing a concise and clear understanding of the process


